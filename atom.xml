<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xyh&#39;s Blog</title>
  
  <subtitle>Hello,world.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-30T13:33:16.508Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Xu YongHui</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring入门</title>
    <link href="http://yoursite.com/2019/07/30/Spring/"/>
    <id>http://yoursite.com/2019/07/30/Spring/</id>
    <published>2019-07-30T07:15:40.000Z</published>
    <updated>2019-07-30T13:33:16.508Z</updated>
    
    <content type="html"><![CDATA[<p><font size="6" color="#6A5ACD">Spring介绍</font></p><p>Spring诞生:</p><ul><li>创建Spring的目的就是用来代替更加重量级的企业级java技术</li><li>简化java的开发<ul><li>基于POJO轻量级和最小侵入式开发</li><li>通过依赖注入和面向接口实现松耦合</li><li>基于切面和惯例进行声明式编程</li><li>通过切面和模板减少板式代码</li></ul></li></ul><hr><p><font size="5">侵入式概念</font></p><p>Spring是一种非侵入式的框架</p><p><strong>侵入式</strong></p><ul><li>对于EJB, Struts2等一些传统的框架, 通常是要实现特定的接口, 继承特定的类才能增强功能<ul><li>改变了java类的结构</li></ul></li></ul><p><strong>非侵入式</strong></p><ul><li>对于Hibernate, Spring等框架, 对现有的类结构没有影响, 就能够增强JavaBean的功能</li></ul><hr><p><font size="5">松耦合</font></p><p>前面我们在写程序的时候, 都是面向接口编程, 通过DaoFactory等方法来实现松耦合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> CategoryDao categoryDao = DaoFactory.getInstance().createDao(<span class="string">"zhongfucheng.dao.impl.CategoryDAOImpl"</span>, CategoryDao.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao = DaoFactory.getInstance().createDao(<span class="string">"zhongfucheng.dao.impl.BookDaoImpl"</span>, BookDao.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao = DaoFactory.getInstance().createDao(<span class="string">"zhongfucheng.dao.impl.UserDaoImpl"</span>, UserDao.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> OrderDao orderDao = DaoFactory.getInstance().createDao(<span class="string">"zhongfucheng.dao.impl.OrderDaoImpl"</span>, OrderDao.class);</span><br></pre></td></tr></table></figure><p>DAO层和Service层通过DaoFactory来实现松耦合</p><ul><li>如果Service层直接new DaoBook(), 那么DAO和Service就紧耦合了[Service层依赖于Dao]</li></ul><p>而Spring给我们更加合适的方法来实现松耦合, 并且更加灵活, 功能更加强大! —&gt;IOC控制反转</p><hr><p><font size="5">切面编程</font></p><p>切面编程也就是AOP编程, 其实我们在之前也接触过…动态代理就是一种切面编程了…</p><p>当时我们使用动态代理+注解的方式给Service层的方法添加权限</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span>   </span><br><span class="line"><span class="meta">@permission</span>(<span class="string">"添加分类"</span>)   </span><br><span class="line"><span class="comment">/*添加分类*/</span>   </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCategory</span><span class="params">(Category category)</span> </span>&#123;       </span><br><span class="line">    categoryDao.addCategory(category);   </span><br><span class="line">&#125;   </span><br><span class="line"><span class="comment">/*查找分类*/</span>   </span><br><span class="line"><span class="meta">@Override</span>   </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findCategory</span><span class="params">(String id)</span> </span>&#123;       </span><br><span class="line">    categoryDao.findCategory(id);   </span><br><span class="line">&#125;   </span><br><span class="line"><span class="meta">@Override</span>   </span><br><span class="line"><span class="meta">@permission</span>(<span class="string">"查找分类"</span>)   </span><br><span class="line"><span class="comment">/*查看分类*/</span>   </span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Category&gt; <span class="title">getAllCategory</span><span class="params">()</span> </span>&#123;       </span><br><span class="line">    <span class="keyword">return</span> categoryDao.getAllCategory();   </span><br><span class="line">&#125;   </span><br><span class="line"><span class="comment">/*添加图书*/</span>   </span><br><span class="line"><span class="meta">@Override</span>   </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBook</span><span class="params">(Book book)</span> </span>&#123;       </span><br><span class="line">    bookDao.addBook(book);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>Controller调用Service的时候, Service返回的是一个代理对象</p></li><li><p>代理对象得到Controller想要调用的方法, 通过反射来看看该方法上有没有注解</p></li><li><p>如果有注解的话, 那么就判断该用户是否有权限来调用此方法, 如果没有权限, 就抛出异常给Controller, Controller接收到异常, 就可以提示用户没有权限了.</p></li></ul><p>  AOP编程可以简单理解成: 在执行某些代码前, 执行另外的代码</p><ul><li>Struts2的拦截器也是面向切面编程[在执行Action业务方法之前执行拦截器]</li></ul><p>Spring也为我们提供更好的方法来实现面向切面编程</p><p><font size="6" color="#6A5ACD">引出Spring</font></p><p>在没学Spring的时候, 开发Web项目:</p><ul><li><ol><li>实体类 - - &gt; class User{}</li><li>daoclass  - - &gt; UserDao{  访问数据库 }</li><li>service - - &gt; class  UserService{ UserDao userDao = new UserDao(); }</li><li>actionclass  UserAction{ UserService userService = new UserService(); }</li></ol></li></ul><p>用户访问:</p><ul><li>Tomcat -&gt; action -&gt; service -&gt; dao</li></ul><p>有几个问题:</p><ul><li><ol><li>:对象创建能否写死</li><li>:对象创建细节<ul><li>action  访问时候创建</li><li>service  启动时候创建</li><li>dao       启动时候创建</li><li>action   多个  [维护成员变量]</li><li>service  一个  [不需要维护公共变量]</li><li>dao       一个  [不需要维护公共变量</li><li>对象数量</li><li>创建时间</li></ul></li><li>:对象的依赖关系<ul><li>action依赖service</li><li>service依赖dao</li></ul></li></ol></li></ul><p>对于第一个问题和第三个问题, 可以通过DaoFactory解决. </p><p>对于第二个问题, 我们要控制对象的数量和创建时间就有点麻烦了</p><p>而Spring框架通过IOC就很好的解决上面的问题</p><hr><p><font size="5">IOC控制反转</font></p><p>Spring的核心思想之一: <strong>Inversion of Control, 控制反转 IOC</strong></p><p>对象的创建交给外部容器完成, 就是控制反转</p><ul><li>Spring使用控制反转来实现对象不用在程序中写死</li><li>控制反转解决对象处理问题[把对象交给别人创建]</li></ul><p>那么对象和对象之间的依赖关系Spring是怎么做的呢? <strong>依赖注入, dependency injection</strong></p><ul><li>Spring使用依赖注入来实现对象之间的依赖关系</li><li>在创建完对象之后, 对象的关系处理就是依赖注入</li></ul><p>控制反转是通过外部容器完成的, 而Spring又为我们提供了这么一个容器, 我们一般将这个容器叫做: IOC容器.</p><p>无论是创建对象, 处理对象之间的依赖关系, 对象创建的时间还是对象的数量, 我们都是在Spring为我们提供的IOC容器上配置对象的信息就好了. </p><p>那么使用IOC控制反转这一思想有什么作用呢? <a href="https://www.zhihu.com/question/23277575/answer/24259844" target="_blank" rel="noopener">来自知乎</a></p><p>我摘取一下核心的部分：</p><blockquote><p>ioc的思想最核心的地方在于，资源不由使用资源的双方管理，而由不使用资源的第三方管理，这可以带来很多好处。<strong>第一，资源集中管理，实现资源的可配置和易管理</strong>。<strong>第二，降低了使用资源双方的依赖程度，也就是我们说的耦合度</strong>。</p></blockquote><blockquote><p>也就是说，甲方要达成某种目的不需要直接依赖乙方，它只需要达到的目的告诉第三方机构就可以了，比如甲方需要一双袜子，而乙方它卖一双袜子，它要把袜子卖出去，并不需要自己去直接找到一个卖家来完成袜子的卖出。它也只需要找第三方，告诉别人我要卖一双袜子。这下好了，甲乙双方进行交易活动，都不需要自己直接去找卖家，相当于程序内部开放接口，卖家由第三方作为参数传入。甲乙互相不依赖，而且只有在进行交易活动的时候，甲才和乙产生联系。反之亦然。这样做什么好处么呢，甲乙可以在对方不真实存在的情况下独立存在，而且保证不交易时候无联系，想交易的时候可以很容易的产生联系。甲乙交易活动不需要双方见面，避免了双方的互不信任造成交易失败的问题。<strong>因为交易由第三方来负责联系，而且甲乙都认为第三方可靠。那么交易就能很可靠很灵活的产生和进行了</strong>。这就是ioc的核心思想。生活中这种例子比比皆是，支付宝在整个淘宝体系里就是庞大的ioc容器，交易双方之外的第三方，提供可靠性可依赖可灵活变更交易方的资源管理中心。另外人事代理也是，雇佣机构和个人之外的第三方。<br>==========================update===========================</p></blockquote><blockquote><p>在以上的描述中，诞生了两个专业词汇，依赖注入和控制反转所谓的依赖注入，则是，甲方开放接口，在它需要的时候，能够讲乙方传递进来(注入)所谓的控制反转，甲乙双方不相互依赖，交易活动的进行不依赖于甲乙任何一方，整个活动的进行由第三方负责管理。</p></blockquote><hr><p><font size="5">Spring模块</font></p><p>Spring可以分为6大模块</p><ul><li>Spring Core   Spring的核心功能: IOC容器, 解决对象创建及依赖关系</li><li>Spring Web    Spring对web模块的支持<ul><li>可以与Struts整合, 让Struts的action创建交给spring</li><li>spring mvc模式</li></ul></li><li>Spring DAO  Spring对jdbc操作的支持</li><li>Spring ORM   spring对orm的支持:<ul><li>既可以与hibernate整合,[session]</li><li>也可以使用spring的对hibernate操作的封装</li></ul></li><li>Spring AOP    切面编程</li><li>SpringEE     Spring对javaEE其他模块的支持</li></ul><p><img src="http://i2.tiimg.com/695160/10a19d86b8c89236.jpg" alt="advatar"></p><p><font size="6" color="#6A5ACD">Core模块快速入门</font></p><p><font size="5">搭建配置环境</font></p><p>引入jar包:</p><p>涉及到Spring core的开发jar包有五个:</p><ul><li><strong>commons-logging-1.1.3.jar           日志</strong></li><li><strong>spring-beans-3.2.5.RELEASE.jar        bean节点</strong></li><li><strong>spring-context-3.2.5.RELEASE.jar       spring上下文节点</strong></li><li><strong>spring-core-3.2.5.RELEASE.jar         spring核心功能</strong></li><li><strong>spring-expression-3.2.5.RELEASE.jar    spring表达式相关表</strong></li></ul><p><strong>编写配置文件:</strong></p><p>Spring核心的配置文件<code>applicationContext.xml</code>或者叫<code>bean.xml</code></p><p>那这个配置文件怎么写呢？？一般地，我们都知道框架的配置文件都是有约束的…我们可以在spring-framework-3.2.5.RELEASE\docs\spring-framework-reference\htmlsingle\index.html找到XML配置文件的约束</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>前面在介绍Spring模块的时候已经说了，Core模块是：IOC容器，解决对象创建和之间的依赖关系。</p><p>因此Core模块主要是学习如何得到IOC容器，通过IOC容器来创建对象、解决对象之间的依赖关系、IOC细节。</p><hr><p><font size="5">得到Spring容器对象[IOC]容器</font></p><ul><li>Bean工厂，BeanFactory[功能简单] </li><li>应用上下文，ApplicationContext[功能强大，一般我们使用这个]</li></ul><p>加载配置文件</p><ul><li><p>通过XmlBeanFactory+配置文件来创建IOC容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加载Spring的资源文件</span></span><br><span class="line">Resource resource = <span class="keyword">new</span> ClassPathResource(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建IOC容器对象【IOC容器=工厂类+applicationContext.xml】</span></span><br><span class="line">BeanFactory beanFactory = <span class="keyword">new</span> XmlBeanFactory(resource);</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>直接通过ClassPathXmlApplicationContext对象来获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 得到IOC容器对象</span></span><br><span class="line">ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br></pre></td></tr></table></figure></li></ul><p>在Spring中总体来看可以通过三种方式来配置对象:</p><ul><li>使用XML文件配置</li><li>使用注解来配置</li><li>使用JavaConfig来配置</li></ul><hr><p><font size="5">XML配置方式</font></p><p>在上面我们已经可以得到IOC对象了. 接下来就是在applicationContext.xml文件中配置信息[让IOC容器根据applicationContext.xml文件来创建对象]</p><ul><li>首先我们有个JavaBean的类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>以前我们是通过new User的方法创建对象的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User;</span><br></pre></td></tr></table></figure><ul><li>现在我们有了IOC容器, 可以让IOC容器帮我们创建对象了. 在applicationContext.xml文件中配置对应的信息就行了</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    使用bean节点来创建对象</span></span><br><span class="line"><span class="comment">        id属性标识着对象</span></span><br><span class="line"><span class="comment">        name属性代表着要创建对象的类全名</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"User"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>通过IOC容器对象获取对象</p><ul><li>在外界通过IOC容器对象得到User对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User user = (User) ac.getBean(<span class="string">"user"</span>);</span><br></pre></td></tr></table></figure><p>上面我们使用的是IOC通过无参构造函数来创建对象, 我们来回顾一下一般有几种创建对象的方式：</p><ul><li><p>无参构造函数创建对象</p></li><li><p>带参数的构造函数创建对象</p></li><li><p>工厂创建对象</p></li><li><ul><li>静态方法创建对象</li><li>非静态方法创建对象</li></ul></li></ul><p>使用无参的构造函数创建对象我们已经会了, 接下来我们看看使用剩下的IOC容器是怎么创建对象的.</p><p><strong><em>带参数的构造函数创建对象</em></strong></p><p>首先, JavaBean要提供带参数的构造函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String id, String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>接下来, 关键是怎么配置xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--通过constructor这个节点来指定构造函数的参数类型、名称、第几个--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span> <span class="attr">value</span>=<span class="string">"zhongfucheng"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在constructor上<strong>如果构造函数的值是一个对象，而不是一个普通类型的值，我们就需要用到ref属性了，而不是value属性</strong></p><p>比如说：<strong>我在User对象上维护了Person对象的值，想要在构造函数中初始化它</strong>。因此，就需要用到ref属性了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"Person"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"User"</span> &gt;</span></span><br><span class="line">    <span class="comment">&lt;!--通过constructor这个节点来指定构造函数的参数类型、名称、第几个--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span> <span class="attr">ref</span>=<span class="string">"person"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong><em>工厂静态方法创建对象</em></strong></p><p>首先, 使用一个工厂的静态方法返回一个对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> User <span class="title">getBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件中使用工厂的静态方法返回对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--工厂静态方法创建对象，直接使用class指向静态类，指定静态方法就行了--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"Factory"</span> <span class="attr">factory-method</span>=<span class="string">"getBean"</span> &gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong><em>工厂非静态方法创建对象</em></strong></p><p>首先, 也是通过工厂的非非静态方法来得到一个对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件中使用工厂的非静态方法返回对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--首先创建工厂对象--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"factory"</span> <span class="attr">class</span>=<span class="string">"Factory"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--指定工厂对象和工厂方法--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"User"</span> <span class="attr">factory-bean</span>=<span class="string">"factory"</span> <span class="attr">factory-method</span>=<span class="string">"getBean"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><strong><em>装载集合</em></strong></p><p>如果对象上的属性或者构造函数拥有集合的时候, 而我们又需要为集合赋值, 那么怎么办？</p><ul><li><strong>在构造函数上，普通类型</strong></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"bb.UserService"</span> &gt;</span>        </span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> &gt;</span>            </span><br><span class="line">           <span class="tag">&lt;<span class="name">list</span>&gt;</span>                </span><br><span class="line">               //普通类型                </span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span>            </span><br><span class="line">           <span class="tag">&lt;/<span class="name">list</span>&gt;</span>        </span><br><span class="line">       <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>在属性上,引用类型</strong></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDao"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p><font size="5">注解方式</font></p><p>通过注解来配置信息就是为了简化IOC容器的配置, 注解可以把对象添加到IOC容器中, 处理对象依赖关系, 我们来看看怎么用吧：</p><p>使用注解步骤：</p><ul><li><p><strong>1. 先引入context名称空间</strong></p></li><li><ul><li>xmlns:context=”<a href="http://www.springframework.org/schema/context&quot;" target="_blank" rel="noopener">http://www.springframework.org/schema/context&quot;</a></li></ul></li><li><p><strong>2. 开启注解扫描器</strong></p></li><li><ul><li><code>&lt;context:component-scan base-package=&quot;&quot;&gt;&lt;/context:component-scan&gt;</code></li><li>第二种方法:也可以通过自定义扫描类以@CompoentScan修饰来扫描IOC容器的bean对象。。如下代码:</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//表明该类是配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//启动扫描器，扫描bb包下的</span></span><br><span class="line">    <span class="comment">//也可以指定多个基础包</span></span><br><span class="line">    <span class="comment">//也可以指定类型</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"bb"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationScan</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在使用@ComponentScan()这个注解的时候，在测试类上需要@ContextConfiguration这个注解来加载配置类</p><ul><li>@ContextConfiguration这个注解又在Spring的test包下</li></ul><p>创建对象以及处理对象依赖关系，相关的注解：</p><ul><li><p><strong>@ComponentScan扫描器</strong></p></li><li><p><strong>@Configuration表明该类是配置类</strong></p></li><li><p><strong>@Component   指定把一个对象加入IOC容器—&gt;@Name也可以实现相同的效果【一般少用】</strong></p></li><li><p><strong>@Repository   作用同@Component； 在持久层使用</strong></p></li><li><p><strong>@Service      作用同@Component； 在业务逻辑层使用</strong></p></li><li><p><strong>@Controller    作用同@Component； 在控制层使用</strong></p></li><li><p><strong>@Resource  依赖关系</strong></p></li><li><ul><li><strong>如果@Resource不指定值，那么就根据类型来找，相同的类型在IOC容器中不能有两个</strong></li><li><strong>如果@Resource指定了值，那么就根据名字来找</strong></li></ul></li></ul><p><strong>测试代码:</strong></p><ul><li>UserDao</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> aa;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="comment">//把对象添加到容器中,首字母会小写</span></span><br><span class="line"><span class="meta">@Repositorypublic</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;        </span><br><span class="line">        System.out.println(<span class="string">"DB:保存用户"</span>);    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>userService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> aa;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//把UserService对象添加到IOC容器中,首字母会小写</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果@Resource不指定值，那么就根据类型来找---&gt;UserDao....当然了，IOC容器不能有两个UserDao类型的对象</span></span><br><span class="line">    <span class="comment">//@Resource</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果指定了值，那么Spring就在IOC容器找有没有id为userDao的对象。</span></span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"userDao"</span>)</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>useraction</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> aa;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">//把对象添加到IOC容器中,首字母会小写</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"userService"</span>)</span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userService.save();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> aa;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建容器对象</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"aa/applicationContext.xml"</span>);</span><br><span class="line"></span><br><span class="line">        UserAction userAction = (UserAction) ac.getBean(<span class="string">"userAction"</span>);</span><br><span class="line"></span><br><span class="line">        userAction.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><p><font size="5">通过java方式</font></p><p>由于Spring的自动装配并不能将第三方库组件装配到应用中, 于是需要显式装配配置. 显示装配有两种方式</p><ul><li>通过java代码装配bean</li><li>通过XML装配bean</li></ul><p><strong>Spring In Action作者首推使用自动装配的功能，而后是通过java代码配置bean，最后才用XML文件配置的方式</strong>..</p><p>那么怎么通过java代码来配置Bean呢？？</p><ul><li>编写一个java类，使用@Configuration修饰该类</li><li>被@Configuration修饰的类就是配置类</li></ul><p><strong>编写配置类:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@org</span>.springframework.context.annotation.Configuration</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Configuration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>使用配置类创建bean:</strong></p><ul><li>使用@Bean来修饰方法，该方法返回一个对象</li><li>不管方法体内的对象是怎么创建的，Spring可以获取得到对象就行了</li><li>Spring内部会将该对象加入到Spring容器中</li><li>容器中bean的ID默认为方法名</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@org</span>.springframework.context.annotation.Configuration</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Configuration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDao <span class="title">userDao</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        UserDao userDao = <span class="keyword">new</span> UserDao();</span><br><span class="line">        System.out.println(<span class="string">"我是在configuration中的"</span>+userDao);</span><br><span class="line">        <span class="keyword">return</span> userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码：要使用@ContextConfiguration加载配置类的信息[引入test包]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> bb;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加载配置类的信息</span></span><br><span class="line"><span class="meta">@ContextConfiguration</span>(classes = Configuration.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test33</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ApplicationContext ac =</span><br><span class="line">                <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bb/bean.xml"</span>);</span><br><span class="line"></span><br><span class="line">        UserDao userDao = (UserDao) ac.getBean(<span class="string">"userDao"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(userDao);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><font size="5">三种方式混合</font></p><p>注解和XML配置是可以混合使用的，JavaConfig和XML也是可以混合使用的</p><p>如果JavaConfig的配置类是分散的，我们一般再创建一个更高级的配置类（root），然后使用<strong>@Import来将配置类进行组合</strong><br>如果XML的配置文件是分散的，我们也是创建一个更高级的配置文件（root），然后<strong>使用来将配置文件组合</strong></p><p><strong>在JavaConfig引用XML</strong></p><ul><li>使用@ImportResource()</li></ul><p><strong>在XML引用JavaConfig</strong></p><ul><li>使用<bean>节点就行了</bean></li></ul><hr><p><font size="5">bean对象创建细节</font></p><ol><li><p>scope属性</p><p>指定scope属性，IOC容器就知道创建对象的时候是单例还是多例的了</p><p>​    <strong>属性的值就只有两个：单例(singleton)/多例(prototype)</strong></p><blockquote><p>当我们使用singleton的时候, 从IOC容器获取的对象都是同一个</p><p>当我们使用prototype的时候, 从IOC容器获取的对象都是不同的</p></blockquote><p>scope属性除了控制对象是单例还是多例的，<strong>还控制着对象创建的时间</strong>！</p><ul><li><p>我们在User的构造函数中打印出一句话，就知道User对象是什么时候创建了。</p></li><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"我是User，我被创建了"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>当使用singleton的时候，对象在IOC容器之前就已经创建了</strong></p><p><strong>当使用prototype的时候，对象在使用的时候才创建</strong></p></li></ul></li></ol><ol start="2"><li><p>lazy-init属性</p><p>lazy-init属性<strong>只对singleton[单例]的对象有效</strong>…..lazy-init默认为false….</p><p>有的时候，可能我们<strong>想要对象在使用的时候才创建，那么将lazy-init设置为ture就行了</strong></p></li></ol><ol start="3"><li><p>init-method和destroy-method</p><p>如果我们想要<strong>对象在创建后, 执行某个方法</strong>, 我们指定为init-method属性就行了</p><p>如果我们想要<strong>IOC容器销毁后, 执行某个方法</strong>, 我们指定destroy-method属性就行了</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"User"</span> <span class="attr">scope</span>=<span class="string">"singleton"</span> <span class="attr">lazy-init</span>=<span class="string">"true"</span> <span class="attr">init-method</span>=<span class="string">""</span> <span class="attr">destroy-method</span>=<span class="string">""</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><strong><em>bean创建细节总结</em></strong></p><blockquote><p> /**<br>     * 1) 对象创建： 单例/多例<br>     *  scope=”singleton”, 默认值， 即 默认是单例 [service/dao/工具类]<br>     *  scope=”prototype”, 多例；              [Action对象]<br>     *<br>     * 2) 什么时候创建?<br>     *    scope=”prototype”  在用到对象的时候，才创建对象。<br>     *    scope=”singleton”  在启动(容器初始化之前)， 就已经创建了bean，且整个应用只有一个。<br>     * 3)是否延迟创建<br>     *    lazy-init=”false”  默认为false,  不延迟创建，即在启动时候就创建对象<br>     *    lazy-init=”true”   延迟初始化， 在用到对象的时候才创建对象<br>     *    （只对单例有效）<br>     * 4) 创建对象之后，初始化/销毁<br>     *    init-method=”init_user”       [对应对象的init_user方法，在对象创建之后执行 ]<br>     *    destroy-method=”destroy_user”  [在调用容器对象的destroy方法时候执行，(容器用实现类)]<br>     */</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;font size=&quot;6&quot; color=&quot;#6A5ACD&quot;&gt;Spring介绍&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;Spring诞生:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建Spring的目的就是用来代替更加重量级的企业级java技术&lt;/li&gt;
&lt;li&gt;简化java的开发&lt;ul&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/07/25/hello-world/"/>
    <id>http://yoursite.com/2019/07/25/hello-world/</id>
    <published>2019-07-25T12:29:36.199Z</published>
    <updated>2019-07-26T09:48:27.082Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a 
      
    
    </summary>
    
    
  </entry>
  
</feed>
